name: 'setup-homeassistant'
description: 'Setup a Home Assistant container for testing'
branding:
  icon: "terminal"
  color: "gray-dark"
inputs:
  tag:
    description: 'The tag of Home Assistant to use'
    required: false
    default: 'dev'
  config-dir:
    description: 'Path to the config dir to be used'
    required: false
    default: ''
  retry-limit:
    description: 'number of maximum retries'
    required: false
    default: 360
outputs:
  url:
    description: "The URL that the test container is running on"
    value: ${{ steps.run.outputs.url }}
  containername:
    description: "The container name for the running container"
    value: ${{ steps.init.outputs.containername }}
  token:
    description: "A LLAT that can be used for authentication"
    value: ${{ steps.user.outputs.token }}
runs:
  using: "composite"
  steps:
    - shell: bash
      id: init
      env:
        CONFIGURATION_DIR: ${{ inputs.config-dir }}
        CONTAINER_TAG: ${{ inputs.tag }}
      run: |
        containername=$(python3 ${{ github.action_path }}/scripts/containername.py)

        mkdir ${{ github.action_path }}/combined_configuration

        if [[ "${CONFIGURATION_DIR}" != "" ]]; then
          echo "Using configuration from ${CONFIGURATION_DIR}"
          cp -r ${{ github.workspace }}/${CONFIGURATION_DIR}/. ${{ github.action_path }}/combined_configuration
        fi

        if [[ "${CONTAINER_TAG}" == "dev" ]]; then
          tag=$(curl -sSLf https://version.home-assistant.io/dev.json | jq .homeassistant.default -r)
          echo "Using $tag from https://version.home-assistant.io/dev.json"
        elif [[ "${CONTAINER_TAG}" == "beta" ]]; then
          tag=$(curl -sSLf https://version.home-assistant.io/beta.json | jq .homeassistant.default -r)
          echo "Using $tag from https://version.home-assistant.io/beta.json"
        elif [[ "${CONTAINER_TAG}" == "stable" ]]; then
          tag=$(curl -sSLf https://version.home-assistant.io/stable.json | jq .homeassistant.default -r)
          echo "Using $tag from https://version.home-assistant.io/stable.json"
        else
          tag="${CONTAINER_TAG}"
        fi

        docker pull "ghcr.io/home-assistant/home-assistant:$tag" 2>&1 >/dev/null

        echo "tag=$tag" >> $GITHUB_OUTPUT
        echo "containername=$containername" >> $GITHUB_OUTPUT
        echo "HOMEASSISTANT_CONTAINER_NAME=$containername" >> $GITHUB_ENV

    - name: Restore image cache
      id: restore_cache
      uses: actions/cache@v4.2.3
      with:
        path: 'action/cache/docker'
        key: '${{ runner.arch }}-cache-docker-homeassistant-${{ steps.init.outputs.tag }}'

    - name: Update image cache on cache miss
      if: steps.restore_cache.outputs.cache-hit != 'true'
      shell: bash
      run: >
        docker pull "ghcr.io/home-assistant/amd64-homeassistant:${{ steps.init.outputs.tag }}" 2>&1 >/dev/null
        && mkdir -p $(dirname './action/cache/docker/${{ steps.init.outputs.tag }}.tar')
        && docker image save 'ghcr.io/home-assistant/amd64-homeassistant:${{ steps.init.outputs.tag }}' \
          --output './action/cache/docker/${{ steps.init.outputs.tag }}.tar'

    - name: Use image cache on cache hit
      if: steps.restore_cache.outputs.cache-hit == 'true'
      shell: bash
      run: >
        docker image load --input './action/cache/docker/${{ steps.init.outputs.tag }}.tar'

    - shell: bash
      run: |
        echo "Verifying configuration"
        if [ ! -f ${{ github.action_path }}/combined_configuration/configuration.yaml ]; then
          docker run --rm \
            -v ${{ github.action_path }}/combined_configuration:/config \
            ghcr.io/home-assistant/home-assistant:${{ steps.init.outputs.tag }} \
            /bin/bash -c "hass --script ensure_config -c /config"
        fi
        docker run --rm \
          -v ${{ github.action_path }}/combined_configuration:/config \
          ghcr.io/home-assistant/home-assistant:${{ steps.init.outputs.tag }} \
          /bin/bash -c "hass --script check_config -c /config"

    - shell: bash
      run: |
        docker run --rm \
          -v ${{ github.action_path }}/combined_configuration:/config \
          ghcr.io/home-assistant/home-assistant:${{ steps.init.outputs.tag }} \
          /bin/bash -c "hass --version -c /config"

    - shell: bash
      id: user
      run: |
        echo "Creating authentication"
        TOKEN=$(docker run --rm \
          -v ${{ github.action_path }}/combined_configuration:/config \
          -v ${{ github.action_path }}/scripts/create_token.py:/tmp/create_token.py \
          ghcr.io/home-assistant/home-assistant:${{ steps.init.outputs.tag }} \
          python3 /tmp/create_token.py)
        echo "token=$TOKEN" >> $GITHUB_OUTPUT

    - shell: bash
      run: |
        docker run -d \
          --network=host \
          --name ${{ steps.init.outputs.containername }} \
          -v ${{ github.action_path }}/combined_configuration:/config \
          ghcr.io/home-assistant/home-assistant:${{ steps.init.outputs.tag }}

    - shell: bash
      id: run
      env:
        RETRY_LIMIT: ${{ inputs.retry-limit }}
      run: |
          BASE_URL="http://127.0.0.1:8123"
          echo "url=$BASE_URL" >> $GITHUB_OUTPUT

          STATUS="false"
          RETRIES=1
          set +e
          echo "Waiting for Home Assistant to start"
          while true; do
            STATUS=$(curl -sSL -H "Authorization: Bearer ${{ steps.user.outputs.token }}" "$BASE_URL/api/config" | jq -r .state)
            if [ "$STATUS" == "RUNNING" ]; then
              break
            elif [ "$RETRIES" == "${RETRY_LIMIT}" ]; then
              echo "Failed to start"
              docker logs ${{ steps.init.outputs.containername }}
              exit 1
            fi
            sleep 1
            RETRIES=$(( $RETRIES + 1 ))
          done
          set -e
